/*
 * Event API
 *
 * The Event API provides functionality related to calendar events and bookings
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using OpenApiGeneratorTesting.Converters;

namespace OpenApiGeneratorTesting.Models
{ 
    /// <summary>
    /// A unique identifier for the event that the booking relates to.
    /// </summary>
    [DataContract]
    public class BookingCreateEventId : IEquatable<BookingCreateEventId>
    {
        /// <summary>
        /// The unique identifier for the event. This identifier is shared between multiple instances of an event for recurring events, so it is not sufficient to uniquely identify an event instance for recurring events.
        /// </summary>
        /// <value>The unique identifier for the event. This identifier is shared between multiple instances of an event for recurring events, so it is not sufficient to uniquely identify an event instance for recurring events.</value>
        [DataMember(Name="eventId", EmitDefaultValue=false)]
        public string EventId { get; set; }

        /// <summary>
        /// The date of a recurring event instance in ISO 8601 with a timezone offset for the event&#39;s local time, eg \&quot;2021-05-30T15:00:00+12:00\&quot;. Only included for recurring events to uniquely identify an event instance in combination with the event ID.
        /// </summary>
        /// <value>The date of a recurring event instance in ISO 8601 with a timezone offset for the event&#39;s local time, eg \&quot;2021-05-30T15:00:00+12:00\&quot;. Only included for recurring events to uniquely identify an event instance in combination with the event ID.</value>
        [DataMember(Name="occurrenceDate", EmitDefaultValue=true)]
        public string? OccurrenceDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BookingCreateEventId {\n");
            sb.Append("  EventId: ").Append(EventId).Append("\n");
            sb.Append("  OccurrenceDate: ").Append(OccurrenceDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BookingCreateEventId)obj);
        }

        /// <summary>
        /// Returns true if BookingCreateEventId instances are equal
        /// </summary>
        /// <param name="other">Instance of BookingCreateEventId to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BookingCreateEventId other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    EventId == other.EventId ||
                    EventId != null &&
                    EventId.Equals(other.EventId)
                ) && 
                (
                    OccurrenceDate == other.OccurrenceDate ||
                    OccurrenceDate != null &&
                    OccurrenceDate.Equals(other.OccurrenceDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (EventId != null)
                    hashCode = hashCode * 59 + EventId.GetHashCode();
                    if (OccurrenceDate != null)
                    hashCode = hashCode * 59 + OccurrenceDate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BookingCreateEventId left, BookingCreateEventId right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BookingCreateEventId left, BookingCreateEventId right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
