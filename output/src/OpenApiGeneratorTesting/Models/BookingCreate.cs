/*
 * Event API
 *
 * The Event API provides functionality related to calendar events and bookings
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using OpenApiGeneratorTesting.Converters;

namespace OpenApiGeneratorTesting.Models
{ 
    /// <summary>
    /// A particular person&#39;s booking for an event.
    /// </summary>
    [DataContract]
    public class BookingCreate : IEquatable<BookingCreate>
    {
        /// <summary>
        /// Gets or Sets EventId
        /// </summary>
        [Required]
        [DataMember(Name="eventId", EmitDefaultValue=false)]
        public BookingCreateEventId EventId { get; set; }

        /// <summary>
        /// The unique identifier of the person that this booking relates to. Can be omitted if making the booking as the authenticated user. If specified, the authentication user must have permission to perform the operation on behalf of this person.
        /// </summary>
        /// <value>The unique identifier of the person that this booking relates to. Can be omitted if making the booking as the authenticated user. If specified, the authentication user must have permission to perform the operation on behalf of this person.</value>
        [DataMember(Name="personId", EmitDefaultValue=false)]
        public string PersonId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BookingCreate {\n");
            sb.Append("  EventId: ").Append(EventId).Append("\n");
            sb.Append("  PersonId: ").Append(PersonId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BookingCreate)obj);
        }

        /// <summary>
        /// Returns true if BookingCreate instances are equal
        /// </summary>
        /// <param name="other">Instance of BookingCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BookingCreate other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    EventId == other.EventId ||
                    EventId != null &&
                    EventId.Equals(other.EventId)
                ) && 
                (
                    PersonId == other.PersonId ||
                    PersonId != null &&
                    PersonId.Equals(other.PersonId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (EventId != null)
                    hashCode = hashCode * 59 + EventId.GetHashCode();
                    if (PersonId != null)
                    hashCode = hashCode * 59 + PersonId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BookingCreate left, BookingCreate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BookingCreate left, BookingCreate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
